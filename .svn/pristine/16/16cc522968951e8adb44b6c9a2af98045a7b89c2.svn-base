
package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSlider;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import listeners.ColorChooserListener;
import listeners.GridListener;
import listeners.ToolsAction;
import model.DrawingTool;
import model.EllipseTool;
import model.LineTool;
import model.PencilTool;
import model.RectangleTool;

public class PowerPaint {

    /** The minor tick spacing for the thickness slider. */
    private static final int MINOR_TICK_SPACING = 1;

    /** The major tick spacing for the thickness slider. */
    private static final int MAJOR_TICK_SPACING = 5;

    /** A list of drawing tools actions. */
    private List<ToolsAction> myToolsActions;

    /** The main frame. */
    private final JFrame myFrame;
    
//    /** The undo all buttons action.*/
//    private AbstractAction myClearAction;
    
    /** The canvas panel to be drawn on. */
    private final CanvasPanel myPanel;

    /** The Slider for the shape thickness. */
    private JSlider myThicknessSlider;
    
    /**
     * This creates the frame and the panel.
     */
    public PowerPaint() {
        myFrame = new JFrame("TCSS 305 PowerPaint");
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myFrame.setVisible(true);
        myFrame.setLocationRelativeTo(null);
        myFrame.setIconImage(new ImageIcon("./images/paintbrush.jpg").getImage());

        myPanel = new CanvasPanel();
        myPanel.setBackground(Color.WHITE);
       
        myFrame.add(myPanel);

        setUpActions();
        start();
    }

    /**
     * This sets up all the drawing tools actions.
     */
    private void setUpActions() {
        myToolsActions = new ArrayList<ToolsAction>();

        myToolsActions.add(new ToolsAction(myPanel , "Pencil",
                                           new ImageIcon("./images/Pencil_bw.gif"),
                                           new PencilTool()));
         

        myToolsActions.add(new ToolsAction(myPanel, "Line",
                                           new ImageIcon("./images/Line_bw.gif"),
                                           new LineTool()));

        myToolsActions.add(new ToolsAction(myPanel, "Rectangle",
                                           new ImageIcon("./images/Rectangle_bw.gif"),
                                           new RectangleTool()));

        myToolsActions.add(new ToolsAction(myPanel, "Ellipse",
                                           new ImageIcon("./images/ellipse_bw.gif"),
                                           new EllipseTool()));
        //myClearAction.setEnabled(!myPanel.isEmpty());
    }

    /**
     * 
     */
    private void start() {
        final JMenuBar menuBar = createMenuBar();
        final JToolBar toolBar = createToolBar();

        myFrame.setJMenuBar(menuBar);
        myFrame.add(toolBar, BorderLayout.SOUTH);
        myFrame.pack();

    }

    /**
     * This creates the menu bar on the JFrame.
     * @return the created menuNBar.
     */
    private JMenuBar createMenuBar() {
        final JMenuBar menuBar = new JMenuBar();
        //final MenuBarClass menuBar = new MenuBarClass();
        final JMenu fileMenu = createFileMenu();

        final JMenu optionMenu = createOptionsMenu();

        final JMenu toolsMenu = createToolsMenu();
        final JMenu helpMenu = new JMenu("Help");
        helpMenu.add(new AbstractAction("About...") {

            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                JOptionPane.showMessageDialog(null, "Nwoke Fortune Chiemeziem\n"
                                                + "Power Paint project TCSS 305 winter 2015",
                                                "About", JOptionPane.INFORMATION_MESSAGE,
                                               new ImageIcon("./images/paintbrush_small.jpg"));
            }
            
        });
        
        final JMenuItem colorMenu = createColorMenuItem();

        menuBar.add(fileMenu);
        menuBar.add(optionMenu);
        menuBar.add(toolsMenu);
        menuBar.add(helpMenu);
        menuBar.add(colorMenu);

        return menuBar;
    }
    
    /**
     * This creates the color menu item menu bar.
     * @return the created menuItem.
     */
    private JMenuItem createColorMenuItem() {
        final JMenuItem colorMenuItem = new JMenuItem("Color...");
        
        colorMenuItem.addActionListener(new ColorChooserListener(myPanel));
       return colorMenuItem;
    }

    /**
     * This creates the tools menu on menu bar, and adds all the actions.
     * @return the created menu.
     */
    private JMenu createToolsMenu() {
        final JMenu tools = new JMenu("Tools");
        tools.setMnemonic('T');
        final ButtonGroup buttonGroup = new ButtonGroup();

        for (final ToolsAction actions : myToolsActions) {
            final JRadioButtonMenuItem button = new JRadioButtonMenuItem(actions);
            buttonGroup.add(button);
            tools.add(button);
        }
        return tools;
    }

    /**
     * This creates the file menu on menu bar.
     * @return the created menu.
     */
    private JMenu createFileMenu() {
        final JMenu file = new JMenu("File");
        file.setMnemonic('F');
        //myClearAction.setEnabled(false);
//        if (myPanel.getComponentCount() == 0) {
//            myClearAction.setEnabled(false);
//        }
//
//        else {
//            myClearAction.setEnabled(false);
//        }
        
       
        file.add(new AbstractAction("Undo all changes") {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myPanel.removeAllDrawings();
            }
        });

        file.addSeparator();

        file.add(new AbstractAction("Exit") {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                myFrame.dispose();
            }

        });

        return file;
    }

    /**
     * This creates the options menu on the menu bar.
     * @return the created menu..
     */
    private JMenu createOptionsMenu() {

        final JMenu options = new JMenu("Options");

        final JMenu thicknessOption = new JMenu("Thickness");
        
        final JCheckBoxMenuItem checkbox = new JCheckBoxMenuItem("Grid");
        checkbox.setMnemonic(KeyEvent.VK_G);
        checkbox.addActionListener(new ActionListener()
        {
            public void actionPerformed(final ActionEvent theEvent) {
                myPanel.setGridSelected(checkbox.isSelected());
                myPanel.repaint();
            }
        });
        
        //options_menu.add(grid_checkbox);

        options.add(checkbox);
        myThicknessSlider = createSlider();
        
        myThicknessSlider.addChangeListener(new ChangeListener() {
            /** Called in response to slider events in this window. */
            public void stateChanged(final ChangeEvent theEvent) {
                final float value = myThicknessSlider.getValue();
                myPanel.setThickness(value);
                myPanel.repaint();
            }
        });

        thicknessOption.add(myThicknessSlider);
        options.add(thicknessOption);

        return options;
    }

    /**
     * This creates the slider on the thickness menu.
     * @return the created slider.
     */
    private JSlider createSlider() {
        final JSlider slider = new JSlider(0, 20, 1);

        slider.setMajorTickSpacing(MAJOR_TICK_SPACING);
        slider.setMinorTickSpacing(MINOR_TICK_SPACING);

        slider.setPaintTicks(true);
        slider.setPaintLabels(true);

        return slider;
    }

    /**
     * This creates the tool bar and adds all the actions.
     * @return the created toolbar.
     */
    private JToolBar createToolBar() {
        final JToolBar toolBar = new JToolBar();

        final ButtonGroup buttonGroup = new ButtonGroup();
        for (final ToolsAction actions : myToolsActions) {
            final JToggleButton button = new JToggleButton(actions);

            buttonGroup.add(button);
            toolBar.add(button);
        }
        return toolBar;
    }

}
